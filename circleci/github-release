#!/bin/bash

# Publishes content from [ARTIFACTS_DIR] as a Github Release.
# Repo must have a VERSION or swagger.yml file in the base directory.
#
# Usage:
#
#   github-release [GITHUB_TOKEN] [ARTIFACTS_DIR]

set -e

# User supplied args
GITHUB_TOKEN=$1
if [[ -z $GITHUB_TOKEN ]]; then echo "Missing arg1 GITHUB_TOKEN" && exit 1; fi

# Set automatically by CircleCI
: ${CIRCLE_PROJECT_REPONAME?"Missing required env var"}
REPO=$CIRCLE_PROJECT_REPONAME
: ${CIRCLE_PROJECT_USERNAME?"Missing required env var"}
USER=$CIRCLE_PROJECT_USERNAME

if [[ ! -e VERSION && ! -e swagger.yml ]]; then echo "Missing VERSION & swagger.yml files" && exit 1; fi
if [[ -e VERSION && -e swagger.yml ]]; then echo "Tag version will not be inferred when both VERSION & swagger.yml files exist" && exit 1; fi

# Download github-release script
echo "Downloading github-release tool"
curl -sSL -o /tmp/github-release.tar.bz2 https://github.com/aktau/github-release/releases/download/v0.5.2/linux-amd64-github-release.tar.bz2
tar jxf /tmp/github-release.tar.bz2 -C /tmp/ && sudo mv /tmp/bin/linux/amd64/github-release /usr/local/bin/github-release

echo "Publishing github-release"
if [[ -e VERSION ]]; then
  TAG=$(head -n 1 VERSION)
else
  # extracts a version from the swagger file in format N.N.N
  TAG=$(grep -E 'version: \d+\.\d+\.\d+$' swagger.yml  | cut -d: -f2 | sed 's/ //g')
fi
if [[ $TAG == "" ]]; then echo "Tag version not inferred from VERSION or swagger.yml files" && exit 1; fi


DESCRIPTION=$(tail -n +2 VERSION)

result=$(github-release release -u $USER -r $REPO -t $TAG -n "$TAG" -d "$DESCRIPTION" -s $GITHUB_TOKEN || true)
if [[ $result == *422* ]]; then
  echo "Release already exists for this tag.";
  exit 0
elif [[ $result == "" ]]; then
  echo "Release created.";
else
  echo "Error creating release: $result"
  exit 1
fi

ARTIFACTS_DIR=$2
if [[ -z $ARTIFACTS_DIR ]]; then
  echo "Skipping publishing artifacts. No ARTIFACTS_DIR env var set";
else
  for f in $ARTIFACTS_DIR; do
      # treat directories and files differently
      if [ -d $f ]; then
          for ff in $(ls $f); do
              echo -e "uploading $ff"
              github-release upload -u $USER -r $REPO -t $TAG -n $ff -f $f/$ff -s $GITHUB_TOKEN
          done
      elif [ -f $f ]; then
          echo -e "uploading $f"
          github-release upload -u $USER -r $REPO -t $TAG -n $f -f $f -s $GITHUB_TOKEN
      else
          echo -e "$f is not a file or directory"
          exit 1
      fi
  done
fi
