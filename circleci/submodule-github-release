#!/bin/bash

# Publishes content from [MODULE_PATH] as a Github Release.
# Repo must have a VERSION file in its base directory.
#
# Usage:
#
#   github-release [--pre-release] <GITHUB_TOKEN> [MODULE_PATH] 

set -e

if [[ $1 == "--pre-release" ]]; then
  PRE_RELEASE="--pre-release"
  GITHUB_TOKEN=$2
  MODULE_PATH=$3
else
  PRE_RELEASE=""
  GITHUB_TOKEN=$1
  MODULE_PATH=$2
fi

if [[ $MODULE_PATH != */ ]]
then 
  MODULE_PATH="$MODULE_PATH/"
fi

# User supplied args
if [[ -z $GITHUB_TOKEN ]]; then echo "Missing arg1 GITHUB_TOKEN" && exit 1; fi

# Set automatically by CircleCI
: ${CIRCLE_PROJECT_REPONAME?"Missing required env var"}
REPO=$CIRCLE_PROJECT_REPONAME
: ${CIRCLE_PROJECT_USERNAME?"Missing required env var"}
USER=$CIRCLE_PROJECT_USERNAME

if [ ! -e VERSION ]; then echo "Missing VERSION file" && exit 1; fi

# Download github-release script
echo "Downloading github-release tool"
GITHUB_RELEASE=/usr/local/bin/github-release
if [[ "$OSTYPE" == "darwin"* ]]; then
  curl -sSL -o /tmp/github-release.bz2 https://github.com/github-release/github-release/releases/download/v0.10.0/darwin-amd64-github-release.bz2
  bunzip2 /tmp/github-release.bz2 && sudo mv /tmp/github-release $GITHUB_RELEASE
else
 curl -sSL -o /tmp/github-release.bz2 https://github.com/github-release/github-release/releases/download/v0.10.0/linux-amd64-github-release.bz2
 bunzip2 /tmp/github-release.bz2 && sudo mv /tmp/github-release $GITHUB_RELEASE
fi

chmod +x $GITHUB_RELEASE

echo "Publishing github-release"
TAG="$(head -n 1 VERSION)"
if [[ ${TAG:0:1} != "v" ]]; then TAG=v$TAG; fi
if  [[ $MODULE_PATH != "/" ]]; then TAG="$MODULE_PATH$TAG"; fi 
DESCRIPTION=$(tail -n +2 VERSION)
echo "$MODULE_PATH"
echo "$TAG"
# create a release and wait at most 60 seconds for it to be created
export GITHUB_TOKEN=$GITHUB_TOKEN
result=$($GITHUB_RELEASE release -u $USER -r $REPO -t $TAG -n "$TAG" -d "$DESCRIPTION" $PRE_RELEASE 2>&1 || true)
now=$SECONDS
end=$((now+60))
if [[ $result =~ "already_exists" ]]; then
  echo "Release already exists for this tag: $TAG";
  exit 0
elif [[ $result == "" ]]; then
  echo "Create release request submitted successfully.";
else
  echo "Error creating release: $result"
  exit 1
fi

release_created=false
while [ $SECONDS -lt $end ]; do
    check_release=$($GITHUB_RELEASE info -u $USER -r $REPO -t $TAG 2>&1 || true)
    if [[ $check_release =~ "could not find the release" ]]; then
      echo -e "Release not yet created at $((SECONDS-now)) seconds since submitting request: \n$check_release\n***"
      sleep 5
      continue
    fi
    echo -e "Release found at $((SECONDS-now)) seconds after submitting request \n$check_release\n***"
    release_created=true
    break
done

if [ release_created = "false" ]; then
  echo "error: $SECONDS seconds have passed since we submitted request to create release but it is not yet created"
  exit 1
fi
