#!/bin/bash

# Common functions used by more than on ci-script
#
# Usage:
#
#   . ./utils

set -e

install_awscli(){
  if type aws > /dev/null; then
    echo "AWS cli already installed"
    return
  fi

  echo "Installing AWS cli..."
  curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
  unzip -q /tmp/awscliv2.zip -d /tmp
  sudo /tmp/aws/install
  echo "Completed AWS cli install"
}

assume_role_with_web_identity() {
  aws configure set profile $2
  read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN << EOF
  $(aws sts assume-role-with-web-identity \
    --role-arn "$1" \
    --role-session-name "oidc-ecr-role-session" \
    --web-identity-token "${CIRCLE_OIDC_TOKEN_V2}" \
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
    --output text)
EOF
  
  if [ -z "${AWS_ACCESS_KEY_ID}" ] || [ -z "${AWS_SECRET_ACCESS_KEY}" ] || [ -z "${AWS_SESSION_TOKEN}" ]; then
    echo "Failed to assume role";
    exit 1
  else
    aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID} --profile $2
    aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY} --profile $2
    aws configure set aws_session_token ${AWS_SESSION_TOKEN} --profile $2
    echo "Assume role with web identity succeeded."
  fi
}

install_yq(){
  if type yq > /dev/null; then
    echo "yq already installed"
    return
  fi

  echo "Installing yq..."
  mkdir -p "/tmp/bin"
  wget -O "/tmp/bin/yq" "https://github.com/mikefarah/yq/releases/download/v4.27.5/yq_linux_amd64"
  chmod +x "/tmp/bin/yq"
  export PATH="/tmp/bin:$PATH"
  echo "Completed yq install"
}

install_breakdowncli(){
  if type breakdowncli > /dev/null; then
    echo "breakdowncli already installed"
    return
  fi

  echo "Installing breakdowncli..."
  mkdir -p "/tmp/bin"
  wget -O "/tmp/bin/breakdowncli" "https://github.com/Clever/ci-scripts/releases/download/breakdowncli%2Fv0.1.4/breakdowncli-v0.1.4-linux-amd64"
  chmod +x "/tmp/bin/breakdowncli"
  export PATH="/tmp/bin:$PATH"
  echo "Completed breakdowncli install"
}

post_github_pr_comment() {
  local repo_owner=$1
  local repo_name=$2
  local sha=$3
  local github_token=$4
  local comment_body=$5

  # Query the GitHub API for open PRs and find the PR number that matches the commit SHA
  API_RESPONSE=$(curl -s "https://api.github.com/repos/$repo_owner/$repo_name/pulls?state=open" \
      -H "Authorization: token $github_token")

  # Find the PR number that matches the commit SHA
  PR_NUMBER=$(echo "$API_RESPONSE" | jq -r --arg SHA "$sha" '.[] | select(.head.sha == $SHA) | .number')

  # Fetch existing comments
  COMMENTS_RESPONSE=$(curl -s "https://api.github.com/repos/$repo_owner/$repo_name/issues/$PR_NUMBER/comments" \
      -H "Authorization: token $github_token")

  # Check if the comment already exists
  EXISTING_COMMENT=$(echo "$COMMENTS_RESPONSE" | jq -r --arg BODY "$comment_body" '.[] | select(.body == $BODY)')

  if [[ -n "$EXISTING_COMMENT" ]]; then
      echo "Comment/Warning already exists. Skipping post."
      return 0
  fi

  # Post comment if PR number is found and comment does not already exist
  if [[ -n "$PR_NUMBER" ]]; then
      curl -s -X POST "https://api.github.com/repos/$repo_owner/$repo_name/issues/$PR_NUMBER/comments" \
          -H "Authorization: token $github_token" \
          -H "Content-Type: application/json" \
          -d "{\"body\": \"$comment_body\"}"
      echo "Comment posted to PR #$PR_NUMBER"
  else
      echo "PR not found for commit $sha"
  fi
}