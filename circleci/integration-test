#!/bin/bash

# Submits an application to integration-testing-service
#
# Usage:
#
#   integration-test [TESTING_SERVICE_URL] [TESTING_SERVICE_USER] [TESTING_SERVICE_PASS] [APP_NAME] [[TESTS_TO_RUN]]
#
# Required circleci provided environment variables:
#
#  CIRCLE_PROJECT_REPONAME
#  CIRCLE_PROJECT_USERNAME
#  CIRCLE_BUILD_NUM
#

set -e

DIR=$(dirname "$0")
. $DIR/utils

if [ $# -ne 4 ] && [ $# -ne 5 ] && [ $# -ne 6 ]; then
    echo "Incorrect number of arguments given. Expected at least 4, received $#"
    echo "Usage: integration-test [TESTING_SERVICE_URL] [TESTING_SERVICE_USER] [TESTING_SERVICE_PASS] [APP_NAMES] [[TESTS_TO_RUN]]"
    exit 1
fi

# User supplied args
TESTING_SERVICE_URL=$1
TESTING_SERVICE_USER=$2
TESTING_SERVICE_PASS=$3
# APP_NAMES is a comma-separated list of applications e.g. app-service,sso-app-service
APP_NAMES=$4
# TESTS_TO_RUN gets a default value, if not specified
# It is a JSON value whose schema corresponds with our internal testing spec schema.
# NOTE: if setting TESTS_TO_RUN via CircleCI env var, do not include a space after the colon - ex. [{"type":"launchpad"}]
TESTS_TO_RUN=${5:-'[{"type": "launchpad"}]'}

# Set automatically by CircleCI
: ${CIRCLE_PROJECT_REPONAME?"Missing required env var"}
REPO=$CIRCLE_PROJECT_REPONAME
: ${CIRCLE_PROJECT_USERNAME?"Missing required env var"}
USER=$CIRCLE_PROJECT_USERNAME
: ${CIRCLE_BUILD_NUM?"Missing required env var"}
BUILD_NUM=$CIRCLE_BUILD_NUM

: ${CIRCLE_TEST_REPORTS?"Missing required env var"}
: ${CIRCLE_ARTIFACTS?"Missing required env var"}

# Convert APP_NAMES (comma-separated list of apps e.g appA,appB) into a JSON array
APPS=$(echo "${APP_NAMES}" |
	   sed 's/,/\n/g' | # a,b,c => a\nb\nc
	   jq --raw-input | # a\nb\nc => "a"\n"b"\n"c"\n ; raw-input means read the input as strings (one per line), not as JSON,
	                    # but we still output as JSON, thus we add the quotes
	   jq --slurp --compact-output # "a"\n"b"\n"c"\n => ["a","b","c"]  ; slurp to combine lines into a JSON array
    )

echo "Submitting to integration-testing-service..."
# SC=$(curl -u $TESTING_SERVICE_USER:$TESTING_SERVICE_PASS \
#   -w "%{http_code}" \
#   --output integration-tests.out \
#   -H "Content-Type: application/json" \
#   -X POST \
#   -d "{\"username\":\"$USER\",\"reponame\":\"$REPO\",\"buildnum\":$BUILD_NUM,\"apps\":${APPS},\"tests\":${TESTS_TO_RUN}}" \
#   $TESTING_SERVICE_URL)

# if [[ $SC -eq 200 ]]; then
#   echo "Successfully submitted to integration-testing-service"
#   JOB_ID=$(cat integration-tests.out | jq -r '.jobId')
#   rm -f integration-tests.out
# else
#   echo "Failed to submit tests to integration-testing-service"
#   echo "------------------------------------------------"
#   cat integration-tests.out
#   echo ""
#   echo "------------------------------------------------"
#   rm -f integration-tests.out
#   exit 1
# fi
JOB_ID="c7f67fa9-813f-4850-b28a-0c6c8c409ece"
echo "Job ID: $JOB_ID"

install_awscli
# aws login.
AWS_S3_PROFILE=oidc-s3-profile
if [[ -v OIDC_S3_UPLOAD_ROLE ]]; then
  echo "Logging into AWS using role credentials...."
  assume_role_with_web_identity $OIDC_S3_UPLOAD_ROLE $AWS_S3_PROFILE 
fi

download_test_artifacts(){
  echo "Downloading test artifacts"
  mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
  for workflowID in $(cat integration-tests.out | jq -r '.testWorkflowIds[]');
  do
    S3_BUCKET_URL="s3://frontend-to-end-tester-files/${workflowID}/artifacts.zip"
    DEST="${CIRCLE_ARTIFACTS}/${workflowID}"
    echo "  Source: $S3_BUCKET_URL"
    echo "  Desination: $DEST"
    if [[ -v OIDC_S3_UPLOAD_ROLE ]]; then
        echo "Downloading files from S3 using profile ${AWS_S3_PROFILE}" 
        aws s3 cp --profile $AWS_S3_PROFILE  $S3_BUCKET_URL $DEST
    else
        echo "Downloading files from S3 using static credentials" 
        aws s3 cp $S3_BUCKET_URL $CIRCLE_ARTIFACTS
    fi
    unzip $DEST/artifacts.zip test-results.xml -d $CIRCLE_TEST_REPORTS/${workflowID}
  done
}

echo "Waiting 1 minute before polling"
# sleep 1m

echo "Polling every 30 seconds for test completion"

# Polling 90 times at 30 seconds each (45 minutes)
# The timeout for the workflow is at 45 minutes, minus reserved time for cleanup.
# Since we aren't planning on canceling the workflow on any shorter timeout, we should poll for that long.
MAX_POLLS=90
for ((i=1;i<=MAX_POLLS;i++))
do
  # sleep 30s
  SC=$(curl -u $TESTING_SERVICE_USER:$TESTING_SERVICE_PASS \
    -w "%{http_code}" \
    --output integration-tests.out \
    -H "Content-Type: application/json" \
    -X GET \
    -s -S \
    "$TESTING_SERVICE_URL?JobID=$JOB_ID")
  if [[ $SC -eq 200 ]]; then
    echo "------------------------------------------------"
    STATUS=$(cat integration-tests.out | jq '.status')
    OUT=$(cat integration-tests.out | jq)
    echo "Tests status: $STATUS"
    echo "Out: $OUT"
    if [[ $STATUS == '"succeeded"' ]]; then
      download_test_artifacts
      rm -f integration-tests.out
      exit 0
    elif [[ $STATUS == '"testsFailed"' ]]; then
      # in this case, .message is a single JSON string encoding a JSON blob of the test output
      echo "------------------------------------------------"
      echo "Test output:"
      cat integration-tests.out | jq -r '.message' | jq
      echo "------------------------------------------------"
      ENV=$(jq .environment < integration-tests.out)
      echo "Tests ran in staging environment: ${ENV:-<not sure>}"
      download_test_artifacts
      rm -f integration-tests.out
      exit 1
    elif [[ $STATUS == '"systemError"' ]]; then
      echo "------------------------------------------------"
      cat integration-tests.out
      echo ""
      echo "------------------------------------------------"
      rm -f integration-tests.out
      exit 1
    fi
  else
    echo "------------------------------------------------"
    echo $SC
  fi
done

echo "------------------------------------------------"
echo "Tests still not finished, timing out"
echo "If last test status was queued then test timed out trying to acquire a lock of staging env. This can happen when a lot of tests are triggered around the same time. A retry after few minutes should resolve it."
echo "If last test status was preparing then test timed out deploying your build to staging env. This can happen if your build is bugged and timing out when deploying or if the app was stuck in queued for a long time. Verify that your build can actually deploy by running it locally or deploying to some dev environment. If that works then reach out to #oncall-infra."
echo "If last test status was testing then your tests timed out. This can happen if the test is actually timing out because of a bad build or because it took a lot of time to queue and prepare the test. If a retry fails then reach out to #oncall-infra."
rm -f integration-tests.out
exit 1
