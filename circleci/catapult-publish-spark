#!/bin/bash

# Uploads script (and libraries if applicable) to s3 and publishes a catapult app.
#
# Usage:
#
#   catapult-publish-spark [APP NAME]

set -e

DIR=$(dirname "$0")
. $DIR/utils

# User supplied arg
APP_NAME=$1
if [[ -z $APP_NAME ]]; then echo "Missing arg1 APP_NAME" && exit 1; fi

# Set automatically by CircleCI
: ${CIRCLE_PROJECT_REPONAME?"Missing required env var"}
: ${CIRCLE_SHA1?"Missing required env var"}
SHORT_SHA=${CIRCLE_SHA1:0:7}
: ${CIRCLE_PROJECT_USERNAME?"Missing required env var"}
USER=$CIRCLE_PROJECT_USERNAME
: ${CIRCLE_BUILD_NUM?"Missing required env var"}
: ${CIRCLE_BRANCH?"Missing required env var"}

# Set by init service
: ${GLUE_AWS_ACCESS_KEY_ID?"Missing required env var"}
: ${GLUE_AWS_SECRET_ACCESS_KEY?"Missing required env var"}
: ${GLUE_AWS_BUCKET?"Missing required env var"}

install_awscli

# aws login.
AWS_GLUE_PROFILE=oidc-glue-profile
if [[ -v OIDC_GLUE_UPLOAD_ROLE ]]; then
  echo "Logging into AWS using role credentials...."
  assume_role_with_web_identity $OIDC_GLUE_UPLOAD_ROLE $AWS_GLUE_PROFILE
fi

# glue is only supported in us-west-2
AWS_REGION="us-west-2"

# hack to switch from /catapult to /v2/catapult
GLUE_AWS_S3_KEY=${APP_NAME}/${SHORT_SHA}

# upload to s3
if [[ -v OIDC_GLUE_UPLOAD_ROLE ]]; then
    echo "Uploading to S3 using profile ${AWS_GLUE_PROFILE}"
    aws s3 cp --profile $AWS_GLUE_PROFILE --recursive bin/${APP_NAME} s3://${GLUE_AWS_BUCKET}-${AWS_REGION}/${GLUE_AWS_S3_KEY}
else
    echo "Uploading to S3 using static credential..."
    AWS_ACCESS_KEY_ID=$GLUE_AWS_ACCESS_KEY_ID \
    AWS_SECRET_ACCESS_KEY=$GLUE_AWS_SECRET_ACCESS_KEY \
    aws s3 cp --recursive bin/${APP_NAME} s3://${GLUE_AWS_BUCKET}-${AWS_REGION}/${GLUE_AWS_S3_KEY}
fi
