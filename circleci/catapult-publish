#!/bin/bash

# Publishes build and application objects to Catapult.
#
# Usage:
#
#   catapult-publish [CATAPULT_URL] [CATAPULT_USER] [CATAPULT_PASS] [APP_NAME]
#
# Required circleci provided environment variables:
#
#  CIRCLE_PROJECT_REPONAME
#  CIRCLE_PROJECT_USERNAME
#  CIRCLE_BUILD_NUM
#

set -e

DIR=$(dirname "$0")
. $DIR/utils

# User supplied args
CATAPULT_URL=$1
if [[ -z $CATAPULT_URL ]]; then echo "Missing arg1 CATAPULT_URL" && exit 1; fi
CATAPULT_USER=$2
if [[ -z $CATAPULT_USER ]]; then echo "Missing arg2 CATAPULT_USER" && exit 1; fi
CATAPULT_PASS=$3
if [[ -z $CATAPULT_PASS ]]; then echo "Missing arg3 CATAPULT_PASS" && exit 1; fi
APP_NAME=$4
if [[ -z $APP_NAME ]]; then echo "Missing arg4 APP_NAME" && exit 1; fi

# Set automatically by CircleCI
: ${CIRCLE_PROJECT_REPONAME?"Missing required env var"}
REPO=$CIRCLE_PROJECT_REPONAME
: ${CIRCLE_PROJECT_USERNAME?"Missing required env var"}
USER=$CIRCLE_PROJECT_USERNAME
: ${CIRCLE_BUILD_NUM?"Missing required env var"}
BUILD_NUM=$CIRCLE_BUILD_NUM
: ${CIRCLE_BRANCH?"Missing required env var"}
BRANCH=$CIRCLE_BRANCH
: ${CIRCLE_PROJECT_REPONAME?"Missing required env var"}
REPO_NAME=$CIRCLE_PROJECT_REPONAME
: ${CIRCLE_SHA1?"Missing required env var"}
SHORT_SHA=${CIRCLE_SHA1:0:7}
FULL_SHA=${CIRCLE_SHA1}

# If file go.mod exists
if [ -f go.mod ]; then
  . $DIR/install-goci

  set +e
  echo "Running goci..."

  VALIDATE_OUTPUT=$(goci validate)
  GOCI_EXIT_CODE=$?


  if [[ -z $GH_RELEASE_TOKEN ]]; then echo "Missing GH_RELEASE_TOKEN" && exit 1; fi

  if [[ $GOCI_EXIT_CODE -eq 2 ]]; then
    echo "goci failed with exit code $GOCI_EXIT_CODE"
    echo "$VALIDATE_OUTPUT"
    post_github_pr_comment $USER $REPO_NAME $FULL_SHA $GH_RELEASE_TOKEN "$VALIDATE_OUTPUT"
    exit $GOCI_EXIT_CODE
  elif [[ $GOCI_EXIT_CODE -eq 1 ]]; then
    echo "goci failed with exit code $GOCI_EXIT_CODE"
    echo "$VALIDATE_OUTPUT"
    exit $GOCI_EXIT_CODE
  fi


  # If a warning is present for a go based repo, we print the warning and will make a PR comment with the warning message
  if [[ -n "$VALIDATE_OUTPUT"  ]]; then
    echo "goci warning:"
    echo "$VALIDATE_OUTPUT"

    post_github_pr_comment $USER $REPO_NAME $FULL_SHA $GH_RELEASE_TOKEN "$VALIDATE_OUTPUT"
  fi

  set -e
  echo "goci passed."
else
  echo "No go.mod file found. Skipping goci."
fi

install_yq

RUN_TYPE=$(yq e '.run.type // "docker"' "launch/${APP_NAME}.yml")

CIRCLE_CI_INTEGRATIONS_URL=$(dirname $CATAPULT_URL)

# Update Catapult URL to v2 if not already
if [[ ! $CATAPULT_URL = *"/v2/catapult"* ]]; then
  CATAPULT_URL=${CATAPULT_URL/catapult/v2/catapult}
fi

echo "Publishing to catapult..."
echo "Using data:"
DATA="{\"username\":\"${USER}\",\"reponame\":\"${REPO_NAME}\",\"buildnum\":${BUILD_NUM},\"app\":{\"run_type\":\"${RUN_TYPE}\",\"id\":\"${APP_NAME}\",\"source\":\"github:Clever/${REPO_NAME}@${FULL_SHA}\",\"branch\":\"${BRANCH}\",\"artifacts\":\"docker:clever/$REPO_NAME@$SHORT_SHA\"}}"
echo "${DATA}"
echo "================================================================================"
SC=$(curl -u $CATAPULT_USER:$CATAPULT_PASS \
  --retry 5 \
  -w "%{http_code}" \
  --output catapult.out \
  -H "Content-Type: application/json" \
  -X POST \
  -d "${DATA}" \
  $CATAPULT_URL)

if [ "$SC" -eq 200 ]; then
  echo "Successfully published catapult application"
  rm -f catapult.out
else
  echo "Failed to publish catapult application"
  echo "------------------------------------------------"
  cat catapult.out
  echo ""
  echo "------------------------------------------------"
  rm -f catapult.out
  exit 1
fi

# publish catalog app config
CATALOG_SYNC_SCRIPT="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )/catalog-sync"
"${CATALOG_SYNC_SCRIPT}" $CIRCLE_CI_INTEGRATIONS_URL $CATAPULT_USER $CATAPULT_PASS $APP_NAME "application"

# publish dep info
BREAKDOWN_SYNC_SCRIPT="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )/breakdown-sync"
"${BREAKDOWN_SYNC_SCRIPT}" "$CIRCLE_CI_INTEGRATIONS_URL/breakdown" $CATAPULT_USER $CATAPULT_PASS
