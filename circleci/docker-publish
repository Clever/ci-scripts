#!/bin/bash

# Logs into Docker registry (DockerHub and optionally ECR),
# then builds and pushes docker image. Docker image is tagged 
# with 7 character git commit SHA.
#
# Usage:
#
#   docker-publish [DOCKER_USER] [DOCKER_PASS] [DOCKER_EMAIL] [ORG]


set -e

check_ecr_vars() {
  # ECR required env vars
  if [[ -z $AWS_ACCOUNT_ID ]]; then echo "Missing var for ECR: AWS_ACCOUNT_ID" && exit 1; fi
  if [[ -z $AWS_REGION ]]; then echo "Missing var for ECR: AWS_REGION" && exit 1; fi
  if [[ -z $ECR_PUSH_SECRET ]]; then echo "Missing var for ECR: ECR_PUSH_SECRET" && exit 1; fi
}

push_ecr_image(){
	eval $(AWS_ACCESS_KEY_ID=$ECR_PUSH_ID AWS_SECRET_ACCESS_KEY=$ECR_PUSH_SECRET aws ecr --region $AWS_REGION get-login)
	docker tag $ORG/$REPO:$SHORT_SHA $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO:$SHORT_SHA
	docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO:$SHORT_SHA
}

# User supplied args
DOCKER_USER=$1
if [[ -z $DOCKER_USER ]]; then echo "Missing arg1 DOCKER_USER" && exit 1; fi
DOCKER_PASS=$2
if [[ -z $DOCKER_PASS ]]; then echo "Missing arg2 DOCKER_PASS" && exit 1; fi
DOCKER_EMAIL=$3
if [[ -z $DOCKER_EMAIL ]]; then echo "Missing arg3 DOCKER_EMAIL" && exit 1; fi
ORG=$4
if [[ -z $ORG ]]; then echo "Missing arg4 ORG" && exit 1; fi

# Set automatically by CircleCI
: ${CIRCLE_PROJECT_REPONAME?"Missing required env var"}
REPO=$CIRCLE_PROJECT_REPONAME
: ${CIRCLE_SHA1?"Missing required env var"}
SHORT_SHA=${CIRCLE_SHA1:0:7}

echo "Building docker image..."
docker build -t $ORG/$REPO:$SHORT_SHA .

if [ $ECR_PUSH_ID != "" ]; then
  echo "ECR access_id available. Pushing to ECR..."
  check_ecr_vars
  push_ecr_image
fi

echo "Logging into DockerHub..."
docker login -u $DOCKER_USER -p $DOCKER_PASS --email="$DOCKER_EMAIL"

echo "Pushing to DockerHub..."
docker push $ORG/$REPO:$SHORT_SHA
